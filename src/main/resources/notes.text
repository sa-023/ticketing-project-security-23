/*
 * ðŸ¦‹ Volumes
 * Â· Volumes are directories (or files) that are outside of the default Union File System and exist as normal directories and files on the host filesystem.
 * Â· Images are appropriate for packaging and distributing relatively static files such as programs; volumes hold dynamic
 *   data or specializations. This distinction makes images reusable and data simple to share.
 *
 * ðŸ¦‹ Docker Compose
 * Â· Docker compose is used to link multiple containers and deploy application from a single command.
 * Â· Docker: When you want to deploy a single (network accessible) container.
 * Â· Docker Compose: When you want to deploy multiple containers to a single host from within a single YAML file.
 * Â· Docker swarm: When you want to deploy a cluster of docker nodes (multiple hosts) for a simple, scalable application.
 *
 * ðŸ¦‹ docker-compose.yaml
 * Â· In this file, we need to specify the version of the Compose file format, at least one service, and optionally volumes and networks:
 *   1. version: "3.7"
 *   2. services: Services refer to the containersâ€™ configuration. For example, letâ€™s take a dockerized web application consisting of a front end,
 *      a back end, and a database. Weâ€™d likely split these components into three images, and define them as three different services in the configuration.
 *   3. volumes: Volumes are physical areas of disk space shared between the host and a container, or even between containers.
 *      In other words, a volume is a shared directory in the host, visible from some or all containers.
 *   4. networks: Networks define the communication rules between containers, and between a container and the host.
 *      Common network zones will make the containersâ€™ services discoverable by each other, while private zones will segregate them in virtual sandboxes.
 *
 * ðŸ¦‹ Docker Network
 * Â· Docker networking is primarily used to establish communication between Docker containers and the outside world via the host machine where the Docker daemon is running.
 * Â· You can run hundreds of containers on a single-node Docker host, so itâ€™s required that the host can support networking
 *   at this scale. VMs usually donâ€™t run into these network limits as they typically run fewer processes per VM.
 * Â· They have their own life cycle and are not bound to any other objects. You can define and manage them directly by using the docker network subcommands.
 * â–  Docker includes three networks, and each is provided by a different driver.
 * 1. Bridge: This is the default. Whenever you start Docker, a bridge network gets created and all newly started
 *    containers will connect automatically to the default bridge network. You can use this whenever you want your containers
 *    running in isolation to connect and communicate with each other. The downside with the bridge driver is that itâ€™s not recommended for production.
 * 2. Host: The host network is provided by the host driver, which instructs Docker not to create any special networking namespace or resources for attached containers
 *    And it removes network isolation between the container and the host machine where Docker is running. For example,
 *    If you run a container that binds to port 80 and uses host networking, the containerâ€™s application is available on port 80 on the hostâ€™s IP address.
 * 3. None: The none network uses the null driver. Containers attached to the none network will not have any network connectivity outside themselves.
 *
 *
 *
 *
 */